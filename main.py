import random

import parameter
import data_db
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup


token_bot = parameter.token

state_storage = StateMemoryStorage()

bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['translate_word']}  ->  {data['target_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    another_words = State()


@bot.message_handler(commands=['start'])
def create_cards(message):
    chat_id = message.chat.id
    if chat_id not in known_users:
        known_users.append(chat_id)

        # –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if not data_db.get_all_id_from_initial_dictionary(sess):
            data_db.fill_dictionary(sess)
        # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ User,
        # —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É User –∏ UserDictionary –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if chat_id not in data_db.get_user(sess):
            data_db.add_user(db_sess=sess, user_id=chat_id)
            data_db.fill_table_user_dictionary_initial_data(db_sess=sess, user_id=chat_id)
        bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!"
                                  f" –î–∞–≤–∞–π –ø–æ—Å–≤—è—Ç–∏–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    words = data_db.get_words_to_check_by_user(db_sess=sess, user_id=chat_id)
    target_word = words[0][0]
    translate = words[0][1]
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = words[1]
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫    {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        word = data['translate_word']
        msg = data_db.delete_word_by_user(db_sess=sess, word=word, user_id=message.chat.id)
        bot.send_message(message.chat.id, msg)
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    chat_id = message.chat.id
    bot.set_state(message.from_user.id, MyStates.another_words, message.chat.id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ—Ç, cat")


@bot.message_handler(state=MyStates.another_words)
def add_words(message):
    chat_id = message.chat.id
    try:
        ru, en = message.text.split(", ")
        if not data_db.check_input_word(ru) or not data_db.check_input_word(en):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!!!")
        ru = ru.lower().rstrip()
        en = en.lower().strip()
        msg = data_db.add_word(db_sess=sess, ru_word=ru, en_word=en, user_id=chat_id)
        bot.send_message(message.chat.id, msg)
        bot.send_message(message.chat.id, "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: /start –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.")
    except ValueError as ex_val:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å–ª–æ–≤. {ex_val}")
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. "
                                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥.")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    if message.chat.id not in known_users:
        bot.send_message(message.from_user.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ: /start")
    else:
        text = message.text
        markup = types.ReplyKeyboardMarkup(row_width=2)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_word = data['target_word']
            if text == target_word:
                hint = show_target(data)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ! ‚ù§", hint]
                hint = show_hint(*hint_text)
            else:
                for btn in buttons:
                    if btn.text == text:
                        btn.text = text + ' ‚ùå'
                        break
                hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                                 f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫   {data['translate_word']}")
        markup.add(*buttons)
        bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))


if __name__ == "__main__":
    sess = data_db.create_session(user=parameter.user_postgresql,
                                  password=parameter.password_postgresql,
                                  host=parameter.localhost,
                                  port=parameter.port_postgresql,
                                  db_name=parameter.name_db)

    bot.infinity_polling(skip_pending=True)

    if sess:
        sess.close()
